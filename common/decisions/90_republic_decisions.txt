appease_estates_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"

	desc = appease_estates_decision_desc
	selection_tooltip = appease_estates_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		is_house_head = yes
		OR = {
			AND = {
				is_independent_ruler = yes
				holds_valid_merchant_republic = yes
				republic_has_council_form = yes
			}
			AND = {
				is_independent_ruler = no
				liege_or_court_owner = {
					holds_valid_merchant_republic = yes
					republic_has_council_form = yes
				}
			}
		}
	}

	cost = {
		gold > 50
	}

	cooldown = { days = 365 }

	is_valid_showing_failures_only = {
		is_imprisoned = no
	}

	effect = {
		trigger_event = republic_decision_events.1001
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

attempt_coup_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_destiny_goal.dds"
	major = yes

	desc = attempt_coup_decision_desc
	selection_tooltip = attempt_coup_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		holds_valid_merchant_republic = yes
	}

	is_valid_showing_failures_only = {
		is_imprisoned = no
	}

	effect = {
		trigger_event = republic_decision_events.1002
		show_as_tooltip = { launch_coup_effect = yes }
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

convert_to_republic_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_dynasty_house.dds"
	major = yes

	desc = convert_to_republic_decision_desc
	selection_tooltip = convert_to_republic_decision_tooltip

	ai_check_interval = 0

	is_shown = {
		is_landed = yes
		is_independent_ruler = yes
		highest_held_title_tier > tier_county
		has_government = feudal_government
	}
	
	is_valid = {
		trigger_if = {
			OR = {
				has_realm_law = crown_authority_2
				has_realm_law = crown_authority_3
			}
		}
		trigger_if = {
			prestige_level >= 3
		}
	}

	effect = {
		change_government = republic_government
		add_realm_law = city_succession_law
		house = {
			custom_description = {
				text = effect_change_family_influence_positive
				value = 2000
				set_variable = {
					name = convert_to_republic_prestige
					value = 2000
					years = 100
				}
			}
		}
		add_family_to_republic_families = yes
		every_vassal = {
			add_family_to_republic_families = yes
		}
		custom_description = {
			text = effect_every_county_gain_county_control
			primary_title = {
				every_in_de_facto_hierarchy = {
					limit = { tier = tier_county }
					change_county_control = 20
				}
			}
		}
		trigger_event = republic_decision_events.1003
	}
	
	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = 0
	}
}

give_speech_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	ai_check_interval = 60

	cost = { prestige = standard_activity_cost }

	cooldown = { days = standard_feast_cooldown_time }

	desc = give_speech_decision_desc
	selection_tooltip = give_speech_decision_tooltip

	is_shown = {
		is_landed = yes
		highest_held_title_tier > tier_barony
		holds_valid_merchant_republic = yes
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	effect = {
		capital_province = {
			spawn_activity = {
				type = activity_speech
				owner = root
			}
		}

		else_if = {
			limit = {
				OR = {
					has_trait = shy
					has_trait = gregarious
					has_trait = diplomat
					has_trait = humble
					has_trait = arrogant
					has_trait = reclusive
				}
			}
			stress_impact = {
				base = feast_stress_loss_value
				shy = activity_stress_gain_impact
				gregarious = activity_stress_loss_impact
				diplomat = activity_stress_loss_impact
				humble = activity_stress_gain_impact
				arrogant = activity_stress_loss_impact
				reclusive = activity_stress_gain_impact
			}
		}
		else = {
			stress_impact = {
				base = feast_stress_loss_value
			}
		}
	}
	
	ai_potential = {
		short_term_gold > standard_activity_cost
		NOT = {
			has_trait = reclusive
		}
	}

	ai_will_do = {
		base = 35

		ai_value_modifier = {
			ai_sociability = 1
		}

		modifier = {
			add = 30
			has_trait = gregarious
		}
		modifier = {
			add = -30
			has_trait = shy
		}
		modifier = {
			add = 47.5
			has_trait = ambitious
		}
	}
}